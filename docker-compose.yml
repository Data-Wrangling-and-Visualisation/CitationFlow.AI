version: '3.8'

services:
  backend:
    build:
      context: ./back
    container_name: backend
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    restart: always
    environment:
      - PORT=${BACKEND_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
    networks:
      - app-network
    depends_on:
      - db

  frontend:
    build:
      context: ./front
    container_name: frontend
    ports:
      - "${FRONTEND_PORT}:80"
    restart: always
    environment:
      - PORT=${FRONTEND_INTERNAL_PORT}
    networks:
      - app-network
    depends_on:
      - backend

  db:
    image: postgres:15
    container_name: db
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${DB_PORT}:5432"
    networks:
      - app-network
    volumes:
      - postgres_data:/var/lib/postgresql/data

  db-populator:
    build:
      context: ./db
    container_name: db-populator
    depends_on:
      - db
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_HOST: ${DB_HOST}
      POSTGRES_PORT: ${DB_PORT}
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
